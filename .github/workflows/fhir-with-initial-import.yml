name: fhir-with-initial-import

on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  TEMP_DIR_PATH: './tmp'
  SYNTHEA_JAR_NAME: 'synthea-with-dependencies.jar'
  FHIR_ENDPT_DOMAIN: '.fhir.azurehealthcareapis.com'

defaults:
  run:
    shell: bash

permissions:
  id-token: write
  contents: read

jobs:


  # job1: deploy the ahds workspace with a fhir service
  deploy-infra-fhir-service:
    #if: ${{ false }} #disables the job
    runs-on: ubuntu-latest
    environment: sample
    outputs:
      uniqueSuffix: ${{ steps.get-unique-names.outputs.uniqueSuffix }} 
      fhirWorkspaceName: ${{ steps.get-unique-names.outputs.fhirWorkspaceName }} 
      fhirName: ${{ steps.get-unique-names.outputs.fhirName }}
      suffix: ${{ steps.get-unique-names.outputs.suffix }}
      
    steps:

      # checkout 
    - uses: actions/checkout@v3

      # Log into Azure
    - name: az-login
      uses: Azure/login@v1.4.6
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
      # Hash the resource group's ID so it's unique but also repeatable
      # steps: 
      # 1. retrieve the resouceGroup's id property
      # 2. hash the id and take the first 8 chars of the hash
      # 3. set the output using the hash substring
    - name: generate unique suffix 
      id: get-unique-names
      shell: bash
      run: |
        rsGroupId=$(az group list --query "[?name=='${{ secrets.AZURE_RG }}'].id" -o tsv)
        
        suffix=$(echo -n $rsGroupId | shasum | cut -c1-8)

        echo "uniqueSuffix=$suffix" >> $GITHUB_OUTPUT
        echo "fhirWorkspaceName=ws$suffix" >> $GITHUB_OUTPUT
        echo "fhirName=fhir$suffix" >> $GITHUB_OUTPUT
        echo "suffix=$suffix" >> $GITHUB_OUTPUT
        
        unset rsGroupId
        unset suffix
               
      # Deploy uisng bicep
      # Important note: you cannot set the fhir service endpoint, it is automatically set by
      # resource based on the workspaceName and the fhirName with a format of
      # 'https://${workspaceName}-${fhirName}.fhir.azurehealthcareapis.com' 
      # @TODO: change fhir+Suffix to be unique within the AHDS workspace

    - name: deploy-fhir
      uses: azure/arm-deploy@v1.0.9
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ secrets.AZURE_RG }}
        template: ./bicep/fhir-api.bicep
        parameters: 'workspaceName=${{steps.get-unique-names.outputs.fhirWorkspaceName}}
        fhirName=${{steps.get-unique-names.outputs.fhirName}}'
        failOnStdErr: false


  # job2: deploy storage account to import fhir resources to the fhir service
  deploy-storage-acct:
    #if: ${{ false }} #disables the job
    needs: [deploy-infra-fhir-service]
    runs-on: ubuntu-latest
    environment: sample
    outputs:
      storage-acct-name: ${{ steps.get-storage-names.outputs.storage-acct-name }} 
      blob-container-name: ${{ steps.get-storage-names.outputs.blob-container-name }} 

    steps:

      # checkout 
    - uses: actions/checkout@v3

      # Log into Azure
    - name: az-login
      uses: Azure/login@v1.4.6
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # generate storage names 
    - name: get-storage-names
      id: get-storage-names
      run: |
        echo "storage-acct-name=fhirimpsa${{needs.deploy-infra-fhir-service.outputs.suffix}}" >> $GITHUB_OUTPUT
        echo "blob-container-name=importsrc" >> $GITHUB_OUTPUT
        
      # deploy storage account
    - name: deploy-storage-acct
      uses: azure/arm-deploy@v1.0.9
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ secrets.AZURE_RG }}
        template: ./bicep/blob-storage.bicep
        parameters: 'storage_acct_name=${{steps.get-storage-names.outputs.storage-acct-name}}
        blob_container_name=${{steps.get-storage-names.outputs.blob-container-name}}'

      # assign the SP with storage blob contributor role to storage acct.
      # Note: the SP must have the Graph Application.Read.All api permission to use 'az ad sp' mehthods.   
      # assign the fhir service managed identity with storage blob contributor role to the storage acct.
    - name: assign-rbac-roles
      run: |
        storageAcctResourceId=$(az resource list -n "${{steps.get-storage-names.outputs.storage-acct-name}}" --query "[].id" -o tsv)
        spObjectId=$(az ad sp show --id "${{secrets.AZURE_CLIENT_ID}}" --query "id" -o tsv)
        fhirMSIObjId=$(az resource list --name "${{needs.deploy-infra-fhir-service.outputs.fhirWorkspaceName}}/${{needs.deploy-infra-fhir-service.outputs.fhirName}}" --query "[].identity.principalId" -o tsv)        

        az role assignment create \
            --assignee-object-id $spObjectId \
            --role "Storage Blob Data Contributor" \
            --assignee-principal-type "ServicePrincipal" \
            --scope $storageAcctResourceId
    
        az role assignment create \
            --assignee-object-id $fhirMSIObjId \
            --role "Storage Blob Data Contributor" \
            --assignee-principal-type "ServicePrincipal" \
            --scope $storageAcctResourceId

  # job3: seed fhir service with synthea data 
  seed-with-synthea-data:
    #if: ${{ false }} #disables the job
    needs: [deploy-storage-acct]
    runs-on: ubuntu-latest
    environment: sample

    steps:

      # checkout 
    - uses: actions/checkout@v3

      # Log into Azure
    - name: az-login
      uses: Azure/login@v1.4.6
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
      # Install synthea and generate data
    - name: install-jdk
      uses: actions/setup-java@v3.8.0
      with:
        distribution: 'microsoft' 
        java-version: '17'
    
      # Generate Synthea dataset
    - name: install-and-run-synthea
      run: |
        java -version
        mkdir ${{ env.TEMP_DIR_PATH }}
        curl -L https://github.com/synthetichealth/synthea/releases/download/master-branch-latest/synthea-with-dependencies.jar --output ${{ env.TEMP_DIR_PATH }}/${{ env.SYNTHEA_JAR_NAME }}
        cd ${{ env.TEMP_DIR_PATH }}
        java -jar ${{ env.SYNTHEA_JAR_NAME }} -m "${{ secrets.SYNTHEA_MODULE_NAME }}" -p ${{ secrets.SYNTHEA_PATIENTS_NUM }}
        ls -l

      # Azcopy synthea data to target storage account
      # Note: appId/clientId here must have the 'Storage Blob Data Contributor' role assigned to the target stoarge account.
    - name: azcopy-to-storage
      run: |
        ls -l
        cd ${{ env.TEMP_DIR_PATH }}
        wget -O azcopy_v10.tar.gz https://aka.ms/downloadazcopy-v10-linux && tar -xf azcopy_v10.tar.gz --strip-components=1
        ls -l
        azcopy login --service-principal --application-id ${{ secrets.AZURE_CLIENT_ID }} --tenant-id ${{ secrets.AZURE_TENANT_ID }}
        azcopy login status
        echo "STORAGEACCT: https://${{needs.deploy-storage-acct.outputs.storage-acct-name}}.blob.core.windows.net/${{needs.deploy-storage-acct.outputs.blob-container-name}}/"
        azcopy cp "./output/fhir/*.*" "https://${{needs.deploy-storage-acct.outputs.storage-acct-name}}.blob.core.windows.net/${{needs.deploy-storage-acct.outputs.blob-container-name}}/" --recursive=true
      #cd output
      #ls -l
      env: 
        AZCOPY_SPA_CLIENT_SECRET: ${{ secrets.AZCOPY_SPA_CLIENT_SECRET }}
